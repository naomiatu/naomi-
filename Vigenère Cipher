import java.util.Scanner;

public class Vigen√®reCipher
{
    public static void main(String[] args)
    {
      String encrypt;
      String keyword;

     Scanner keyboard=new Scanner(System.in);

      System.out.print("Enter word for encryption here: ");
      //converting both strings into Lower case to make use of the ASCII
      encrypt=keyboard.nextLine().toLowerCase();
      System.out.print("Enter keyword: ");
      keyword=keyboard.nextLine().toLowerCase();


      String repeatedKeyword = repeatKeyword(encrypt, keyword); // repeatKeyword is a method that will repeat the keyword to match the length of the text to encrypt
      System.out.println("Repeated Keyword: " + repeatedKeyword); // prints out the repeated keyword for the user to see 
      String encryptedText = encryptText(encrypt, repeatedKeyword); //this calls the encryptText() method to encrypt the input usimg the repated word
      System.out.println("Encrypted Text: " + encryptedText); // prints the encrypted text for the user 
         
      
    }

    public static String repeatKeyword(String encrypt, String keyword)//this method takes in the string to encrpt and the keyword, and returns the version of the keyword repeated to match the length of the input
    {
        StringBuilder result = new StringBuilder(); // this creates a new empty instance of the StringBuilder class which does'nt currently contain any charcters
        int cipherLength = encrypt.length(); // Get the length of the ciphertext to encrypt 
        
        // this is creating a loop so that the keyword is repeated until the ciphertext is fully warped 
        while (result.length()<cipherLength)
        {
            result.append(keyword);//This takes the current contents of result (which is empty at this point) and adds the contents of keyword to it.
        } 
        // If the result is longer than the ciphertext this trims it
        if (result.length()>cipherLength)
        {
           result.setLength(cipherLength);// Set the length of result to match the ciphertext length
           
        } // Converts the StringBuilder back to a string and returns it
            return result.toString();
  
    }
    
    public static String encryptText(String encrypt, String repeatedKeyword) 
    {
       StringBuilder result = new StringBuilder(); // Creates a new StringBuilder for the encrypted text
    
       for (int i = 0; i < encrypt.length(); i++) //a loop that goes through each character of the text to encrypt
       {
           char currentChar = encrypt.charAt(i);

       // this checks if the character is a lower case letter between a and z and ignores spaces or punctuation
       if (currentChar >= 'a' && currentChar <= 'z') 
         {
           // Calculate shift using the keyword
           int shift = repeatedKeyword.charAt(i)-'a';  // Determine the shift from the keyword
           char encryptedChar = (char) ((currentChar - 'a' + shift) % 26 + 'a'+1);  // Shift the current character
           result.append(encryptedChar);  
         
          } 

       }
        return result.toString(); 
    }
}

